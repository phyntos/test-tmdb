{"version":3,"sources":["context/index.js","hooks/useFetching.js","API/MovieAPI.js","components/Pages/Movies/SelectFilter.jsx","components/MovieCommon/MoviePoster.jsx","components/MovieList/MovieItem/MovieItemBox.jsx","components/MovieCommon/GenresText.jsx","components/MovieCommon/MyIconButton.jsx","components/MovieList/MovieItem/RemoveConfirm.jsx","components/MovieCommon/AddRemoveButtons.jsx","components/MovieList/MovieItem/MovieItemInfo.jsx","components/MovieList/MovieItem/MovieItem.jsx","components/MovieList/MovieList.jsx","components/MovieList/ShowMore.jsx","components/MovieList/MovieListPaged.jsx","components/Pages/Movies/Movies.jsx","components/Pages/Favorites/Favorites.jsx","components/Pages/Movie/MovieInfo/MovieInfoBox.jsx","components/Pages/Movie/MovieInfo/MovieInfo.jsx","components/Pages/Movie/Movie.jsx","components/Pages/Search/Search.jsx","components/AppRouter.jsx","components/Header/SearchInput.jsx","components/Header/FavoriteButton.jsx","components/Header/MoviesButton.jsx","components/Header/Header.jsx","components/MovieApp.jsx","App.js","index.js"],"names":["MovieContext","createContext","useFetching","callback","deps","useState","isLoading","setIsLoading","error","setError","fetching","a","message","useCallback","instance","axios","create","baseURL","params","MovieAPI","option","page","get","response","data","console","log","id","query","SelectFilter","value","onChange","justifyContent","alignItems","w","e","target","imageSizes","md","height","width","url","lg","MoviePoster","src","alt","size","props","loaded","setLoaded","h","isIndeterminate","color","style","display","onLoad","MovieItemBox","children","templateColumns","borderRadius","boxShadow","_hover","transition","GenresText","genres","fontSize","map","genre","index","name","length","iconTypes","add","Icon","Star","rgb","hex","title","remove","Delete","cancel","NotAllowed","MyIconButton","type","newProps","background","_active","key","_focus","borderColor","border","variant","colorScheme","icon","RemoveConfirm","direction","textAlign","mb","mr","onClick","AddRemoveButtons","hasInFavorites","MovieItemInfo","hasConfirm","date","vote","setHasConfirm","templateRows","p","fontWeight","MovieItem","movie","useContext","context","setContext","favorites","_favorites","_genres","hasRemoveConfirm","setHasRemoveConfirm","location","useLocation","setGenres","useEffect","genre_ids","genre_id","find","localStorage","setItem","JSON","stringify","to","borderLeftRadius","poster_path","release_date","vote_average","localMovie","f","pathname","newFavorites","filter","MovieList","progressColor","noText","movies","mt","autoRows","gap","ShowMore","hasShowMore","showMore","minHeight","MovieListPaged","Movies","setMovies","filterPage","setFilterPage","setHasShowMore","getMovies","Promise","resolve","setTimeout","results","fetchMovies","isMoviesLoading","moviesError","Favorites","isFavoriteLoading","setIsFavoriteLoading","MovieInfoBox","posterPath","backgroundImage","backgroundRepeat","backgroundSize","MovieInfo","overview","Movie","useParams","setMovie","recommendations","setRecommendations","getMovie","fetchMovie","isMovieLoading","movieError","getRecommendations","rec","pop","fetchRecommendations","isRecommendations","recommendationsError","Search","search","setSearch","setPage","getSearch","fetchSearch","isSearch","searchError","AppRouter","exact","path","SearchInput","setQuery","history","useHistory","placeholder","onKeyPress","event","push","FavoriteButton","bgColor","paddingX","as","Link","MoviesButton","Calendar","Header","MovieApp","marginY","App","getGenres","getItem","parse","fetchStart","isStarting","startError","Provider","ReactDOM","render","document","getElementById"],"mappings":"+LAEaA,EAAeC,wBAAc,M,OCA7BC,EAAc,SAACC,EAAUC,GAAU,IAAD,EACTC,oBAAS,GADA,mBACpCC,EADoC,KACzBC,EADyB,OAEjBF,mBAAS,IAFQ,mBAEpCG,EAFoC,KAE7BC,EAF6B,KAIrCC,EAAQ,uCAAG,sBAAAC,EAAA,sEAETJ,GAAa,GAFJ,SAGHJ,IAHG,sDAKTM,EAAS,KAAIG,SALJ,uBAOTL,GAAa,GAPJ,0EAAH,qDAcd,MAAO,CAFaM,sBAAaH,EAAF,YAAgBN,IAE1BE,EAAWE,I,wBClB9BM,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gCACTC,OAAQ,CACJ,QAAW,mCACX,SAAY,KACZ,OAAU,QAKGC,E,qIACjB,WAAuBC,EAAQC,GAA/B,gGAE+BP,EAASQ,IAAI,SAAWF,EAAQ,CACnDF,OAAQ,CACJG,KAAMA,KAJtB,cAEcE,EAFd,yBAOeA,EAASC,MAPxB,gCASQC,QAAQC,IAAR,MATR,yD,sHAaA,WAAsBC,GAAtB,gGAE+Bb,EAASQ,IAAI,SAAWK,GAFvD,cAEcJ,EAFd,yBAGeA,EAASC,MAHxB,gCAKQC,QAAQC,IAAR,MALR,yD,8HASA,WAAgCC,GAAhC,gGAE+Bb,EAASQ,IAAI,SAAWK,EAAK,oBAF5D,cAEcJ,EAFd,yBAGeA,EAASC,MAHxB,gCAKQC,QAAQC,IAAR,MALR,yD,qHASA,WAAuBE,EAAOP,GAA9B,gGAE+BP,EAASQ,IAAI,gBAAiB,CACjDJ,OAAQ,CACJU,MAAOA,EACPP,KAAMA,KALtB,cAEcE,EAFd,yBAQeA,EAASC,MARxB,gCAUQC,QAAQC,IAAR,MAVR,yD,uHAcA,6GAE+BZ,EAASQ,IAAI,oBAF5C,cAEcC,EAFd,yBAGeA,EAASC,MAHxB,gCAKQC,QAAQC,IAAR,MALR,yD,0ICtCWG,EAjBM,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAC1B,OACI,cAAC,IAAD,CAAMC,eAAe,SAASC,WAAW,SAAzC,SACI,eAAC,IAAD,CACIC,EAAG,IACHJ,MAAOA,EACPC,SAAU,SAAAI,GAAC,OAAIJ,EAASI,EAAEC,OAAON,QAHrC,UAKI,wBAAQA,MAAM,UAAd,+GACA,wBAAQA,MAAM,cAAd,6FACA,wBAAQA,MAAM,WAAd,yGACA,wBAAQA,MAAM,YAAd,6F,mCCVVO,EAAa,CACfC,GAAI,CACAC,OAAQ,IACRC,MAAO,IACPC,IAAK,sBAETC,GAAI,CACAH,OAAQ,IACRC,MAAO,IACPC,IAAK,SAqCEE,EAjCK,SAAC,GAAgC,IAQ7CF,EARcG,EAA8B,EAA9BA,IAAKC,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,KAASC,EAAW,sCAEpB1C,oBAAS,GAFW,mBAEzC2C,EAFyC,KAEjCC,EAFiC,KAehD,OAFIR,EAHCG,EAGK,8BAAgCP,EAAWS,GAAML,IAAMG,EAF1D,sCAAkCP,EAAWS,GAAMN,MAAnD,YAA4DH,EAAWS,GAAMP,OAA7E,yBAKH,eAAC,IAAD,CAAKW,EAAGb,EAAWS,GAAMP,OAAQL,EAAGG,EAAWS,GAAMN,MAArD,WAESQ,GAAU,cAAC,IAAD,CAAQE,EAAE,OAAV,SAAiB,cAAC,IAAD,CAAkBC,iBAAe,EAACC,MAAM,cAGpE,cAAC,IAAD,aACIC,MAAQL,EAA4B,GAAnB,CAACM,QAAS,QAC3BV,IAAKH,EACLI,IAAKA,EACLU,OArBD,WACXN,GAAU,KAqBMF,QC1BTS,EAdM,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACnB,OACI,cAAC,IAAD,CACIC,gBAAgB,cAChBC,aAAc,GACdC,UAAU,KACVC,OAAQ,CAACD,UAAW,WACpBE,WAAW,8BALf,SAOKL,KCGEM,EAZI,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,OAAQlB,EAAU,EAAVA,KACzB,OACI,cAAC,IAAD,CAAMmB,SAAUnB,EAAhB,SAEQkB,EAAOE,KAAI,SAACC,EAAOC,GAAR,OACP,iCAAsBD,EAAME,KAAMD,IAAUJ,EAAOM,OAAS,GAAK,OAAtDH,EAAMxC,U,oCCJ/B4C,EAAY,CACdC,IAAK,CACDC,KAAM,CACF/B,GAAI,cAACgC,EAAA,EAAD,CAAUxC,EAAG,EAAGgB,EAAG,EAAGE,MAAM,eAChCd,GAAI,cAACoC,EAAA,EAAD,CAAUxC,EAAG,EAAGgB,EAAG,EAAGE,MAAM,gBAEpCuB,IAAK,eACLC,IAAK,UACLxB,MAAO,SACPyB,MAAO,kHAEXC,OAAQ,CACJL,KAAM,CACF/B,GAAI,cAACqC,EAAA,EAAD,CAAY7C,EAAG,EAAGgB,EAAG,EAAGE,MAAM,YAClCd,GAAI,cAACyC,EAAA,EAAD,CAAY7C,EAAG,EAAGgB,EAAG,EAAGE,MAAM,aAEtCuB,IAAK,cACLC,IAAK,UACLxB,MAAO,MACPyB,MAAO,kHAEXG,OAAQ,CACJP,KAAM,CACF/B,GAAI,cAACuC,EAAA,EAAD,CAAgB/C,EAAG,EAAGgB,EAAG,EAAGE,MAAM,cACtCd,GAAI,cAAC2C,EAAA,EAAD,CAAgB/C,EAAG,EAAGgB,EAAG,EAAGE,MAAM,eAE1CuB,IAAK,eACLC,IAAK,UACLxB,MAAO,QACPyB,MAAO,yCA8BAK,EA1BM,SAAC,GAA4B,IAA3BpC,EAA0B,EAA1BA,KAAMqC,EAAoB,EAApBA,KACrBC,EADyC,+BAS7C,MAPa,OAATtC,IACAsC,EAAQ,2BACDA,GADC,IAEJvB,OAAQ,CAAEwB,WAAY,eACtBC,QAAS,CAAED,WAAY,kBAI3B,wBAAC,IAAD,2BACQD,GADR,IAEIP,MAAON,EAAUY,GAAMN,MACvBU,IAAKJ,EAAKrC,EACV0C,OAAQ,CAAC5B,UAAU,QAAD,OAAUW,EAAUY,GAAMR,IAA1B,2BAClBc,YAAalB,EAAUY,GAAMP,IAC7Bc,OAAO,YACP/B,aAAa,MACbgC,QAAQ,UACRC,YAAarB,EAAUY,GAAM/B,MAC7BN,KAAMA,EACN+C,KAAMtB,EAAUY,GAAMV,KAAK3B,OC1CxBgD,EAZO,SAAC,GAAsB,IAArBhB,EAAoB,EAApBA,OAAQE,EAAY,EAAZA,OAC5B,OACI,eAAC,IAAD,CAAMe,UAAU,SAAS/D,eAAe,gBAAxC,UACI,cAAC,IAAD,CAAMgE,UAAU,SAAS/B,SAAS,KAAKgC,GAAI,EAA3C,wFACA,eAAC,IAAD,CAAMjE,eAAe,SAArB,UACI,cAAC,EAAD,CAAcmD,KAAK,SAASe,GAAI,EAAGpD,KAAK,KAAKqD,QAASrB,IACtD,cAAC,EAAD,CAAcK,KAAK,SAASrC,KAAK,KAAKqD,QAAS,kBAAMnB,GAAO,aCK7DoB,EAZU,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,eAAgBvB,EAA2B,EAA3BA,OAAQN,EAAmB,EAAnBA,IAAQzB,EAAW,iDAClE,OACI,8BAEQsD,EACM,cAAC,EAAD,2BAAkBtD,GAAlB,IAAyBoC,KAAK,SAASgB,QAASrB,KAChD,cAAC,EAAD,2BAAkB/B,GAAlB,IAAyBoC,KAAK,MAAMgB,QAAS3B,QCwBpD8B,EA3BO,SAAC,GAAyF,IAAxFzB,EAAuF,EAAvFA,MAAOb,EAAgF,EAAhFA,OAAQuC,EAAwE,EAAxEA,WAAYzB,EAA4D,EAA5DA,OAAQN,EAAoD,EAApDA,IAAKgC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,cAAeL,EAAoB,EAApBA,eACvF,OACI,eAAC,IAAD,CAAMM,aAAa,WAAWC,EAAG,EAAjC,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAMC,WAAW,OAAjB,SAAyBhC,IACzB,cAAC,EAAD,CAAY/B,KAAK,KAAKkB,OAAQA,OAG9BuC,EAEI,cAAC,EAAD,CAAezB,OAAQA,EAAQE,OAAQ0B,IAEvC,eAAC,IAAD,CAAMzE,WAAW,WAAWD,eAAe,gBAA3C,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAMoB,MAAM,WAAZ,SAAwBoD,IACxB,cAAC,IAAD,CAAMK,WAAW,OAAjB,SAAyBJ,GAAQ,2EAErC,cAAC,EAAD,CACIJ,eAAgBA,EAChB7B,IAAKA,EAAKM,OAAQA,EAAQhC,KAAK,cCoD5CgE,EAtEG,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAAW,EACGC,qBAAWhH,GAAlCiH,EADoB,EACpBA,QAASC,EADW,EACXA,WADW,EAEG,CAACD,EAAQE,UAAWF,EAAQjD,QAAnDoD,EAFoB,KAERC,EAFQ,OAGqBhH,oBAAS,GAH9B,mBAGpBiH,EAHoB,KAGFC,EAHE,KAIrBC,EAAWC,cAJU,EAKCpH,mBAAS0G,EAAM/C,QAAU,IAL1B,mBAKpBA,EALoB,KAKZ0D,EALY,KAO3BC,qBAAU,WACFZ,EAAMa,WACNF,EAAUX,EAAMa,UAAU1D,KAAI,SAAA2D,GAAQ,MAAK,CACvClG,GAAIkG,EACJxD,KAAMgD,EAAQS,MAAK,SAAA3D,GAAK,OAAIA,EAAMxC,KAAOkG,KAAUxD,YAG5D,CAAC0C,EAAOM,IAoCX,OANAM,qBAAU,WACoB,IAAtBP,EAAW9C,QACXyD,aAAaC,QAAQ,YAAaC,KAAKC,UAAUd,MAEtD,CAACA,IAGA,eAAC,EAAD,WACI,cAAC,IAAD,CAAMe,GAAI,UAAYpB,EAAMpF,GAA5B,SACI,cAAC,EAAD,CAAayG,iBAAkB,GAAItF,KAAK,KAAKF,IAAKmE,EAAMsB,YAAaxF,IAAKkE,EAAMlC,UAEpF,cAAC,EAAD,CACIA,MAAOkC,EAAMlC,MACbb,OAAQA,EACRwC,KAAMO,EAAMuB,aACZ7B,KAAMM,EAAMwB,aACZhC,WAAYe,EACZ9C,IA7CQ,WAChB,IAAIgE,EAAa,CACb7G,GAAIoF,EAAMpF,GACVkD,MAAOkC,EAAMlC,MACbwD,YAAatB,EAAMsB,YACnBrE,OAAQA,EACRsE,aAAcvB,EAAMuB,aACpBC,aAAcxB,EAAMwB,cAEnBnB,EAAWU,MAAK,SAAAW,GAAC,OAAIA,EAAE9G,KAAO6G,EAAW7G,OAC1CuF,EAAW,2BACJD,GADG,IAENE,UAAU,GAAD,mBAAMC,GAAN,CAAkBoB,QAiCT1D,OA7BP,WACnB,GAA0B,eAAtB0C,EAASkB,WAAkD,IAArBpB,EACtCC,GAAoB,OACjB,CACH,IAAIoB,EAAevB,EAAWwB,QAAO,SAAAH,GAAC,OAAIA,EAAE9G,KAAOoF,EAAMpF,MACzDuF,EAAW,2BACJD,GADG,IAENE,UAAWwB,OAuBXjC,cAAea,EACflB,eAAgBe,EAAWU,MAAK,SAAAW,GAAC,OAAIA,EAAE9G,KAAOoF,EAAMpF,YCjDrDkH,EAjBG,SAAC,GAA0D,IAAD,IAAxDxH,YAAwD,MAAjD,EAAiD,EAA9Cf,EAA8C,EAA9CA,UAAWwI,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,OAC5D,OAEI,cAAC,IAAD,CAAMjD,UAAU,SAAS9D,WAAW,SAApC,SAEkB,IAATZ,GAAcf,EACT,cAAC,IAAD,CAAQ2I,GAAI,EAAZ,SAAe,cAAC,IAAD,CAAkB9F,iBAAe,EAACC,MAAO0F,MACtC,IAAlBE,EAAO1E,OACH,cAAC,IAAD,CAAM0B,UAAU,SAAS/B,SAAS,MAAlC,SAAyC8E,IACzC,cAAC,IAAD,CAAMjF,WAAW,KAAKJ,gBAAgB,mBAAmBwF,SAAS,QAAQC,IAAK,GAA/E,SACGH,EAAO9E,KAAI,SAAA6C,GAAK,OAAI,cAAC,EAAD,CAA0BA,MAAOA,GAAjBA,EAAMpF,Y,SCGxDyH,EAdE,SAAC,GAAqE,IAApE9I,EAAmE,EAAnEA,UAAW+I,EAAwD,EAAxDA,YAAaC,EAA2C,EAA3CA,SAAUjI,EAAiC,EAAjCA,KAAM2H,EAA2B,EAA3BA,OAAQF,EAAmB,EAAnBA,cAC/D,OACI,cAAC,IAAD,CAAQS,UAAU,QAAlB,SAEQjJ,EACe,IAATe,GAAc,cAAC,IAAD,CAAkB8B,iBAAe,EAACC,MAAO0F,IACvDO,EACsB,IAAlBL,EAAO1E,QAAgB,cAAC,IAAD,CAAQ6B,QAASmD,EAAjB,iFACvB,cAAC,IAAD,CAAMrF,SAAS,MAAf,wHCGXuF,EATQ,SAAC,GAA+C,IAA9CH,EAA6C,EAA7CA,YAAaN,EAAgC,EAAhCA,OAAQO,EAAwB,EAAxBA,SAAavG,EAAW,mDAClE,OACI,eAAC,IAAD,WACI,cAAC,EAAD,2BAAeA,GAAf,IAAsBgG,OAAQA,KAC9B,cAAC,EAAD,2BAAchG,GAAd,IAAqBsG,YAAaA,EAAaC,SAAUA,SC0DtDG,EA5DA,WAAO,IAAD,EAEWpJ,mBAAS,IAFpB,mBAEV2I,EAFU,KAEFU,EAFE,OAGmBrJ,mBAAS,CACzCuI,OAAQ,UACRvH,KAAM,IALO,mBAGVsI,EAHU,KAGEC,EAHF,OAOqBvJ,oBAAS,GAP9B,mBAOVgJ,EAPU,KAOGQ,EAPH,OASmC3J,EAAW,sBAAC,4BAAAS,EAAA,6DAC5DkJ,GAAe,GAD6C,SAEzC1I,EAAS2I,UAAUH,EAAWf,OAAQe,EAAWtI,MAFR,cAEtDG,EAFsD,gBAGtD,IAAIuI,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAHW,OAIpC,IAApBL,EAAWtI,KACiB,IAAxBG,EAAK0I,QAAQ5F,OACboF,EAAU,GAAD,mBAAKV,GAAL,YAAgBxH,EAAK0I,WAC3BL,GAAe,GAEtBH,EAAUlI,EAAK0I,SATyC,2CAW7D,CAACP,IApBa,mBASVQ,EATU,KASGC,EATH,KASoBC,EATpB,KAsBjB1C,oBAAWwC,EAAa,CAACA,IAgBzB,OACI,eAAC,IAAD,CAAMxD,aAAa,WAAWwC,IAAK,GAAnC,UACI,cAAC,EAAD,CAAcrH,MAAO6H,EAAWf,OAAQ7G,SAhBzB,SAACD,GACpB8H,EAAc,CACVvI,KAAM,EACNuH,OAAQ9G,OAeJuI,EACM,cAAC,IAAD,UAASA,IAEX,cAAC,EAAD,CACIhJ,KAAMsI,EAAWtI,KACjBgI,YAAaA,EACbC,SAlBH,WACbM,EAAc,2BACPD,GADM,IAETtI,KAAMsI,EAAWtI,KAAO,MAgBZ2H,OAAQA,EACRD,OAAO,gEACPzI,UAAW8J,EACXtB,cAAc,iBCpCvBwB,EAnBG,WAAO,IACdrD,EAAWD,qBAAWhH,GAAtBiH,QADa,EAE8B5G,oBAAS,GAFvC,mBAEbkK,EAFa,KAEMC,EAFN,KASpB,OALA7C,qBAAU,WACNsC,YAAW,WACPO,GAAqB,KACtB,OACJ,IAEC,cAAC,EAAD,CACIxB,OAAQ/B,EAAQE,UAChB7G,UAAWiK,EACXzB,cAAc,aACdC,OAAO,+ECOJ0B,EAtBM,SAAC,GAA4B,IAA3BhH,EAA0B,EAA1BA,SAAUiH,EAAgB,EAAhBA,WAC7B,OACI,cAAC,IAAD,CACIC,gBAAe,oEAA+DD,EAA/D,KACfE,iBAAiB,YACjBC,eAAe,QACftB,UAAU,QAJd,SAKI,cAAC,IAAD,CACItH,WAAW,SACXD,eAAe,SACfuH,UAAU,QACVnG,MAAM,QACNuH,gBAAgB,2GALpB,SAOI,cAAC,IAAD,CAAMjH,gBAAgB,cAAtB,SACKD,SC4CNqH,GAtDG,SAAC,GAAa,IAAZ/D,EAAW,EAAXA,MAAW,EAEGC,qBAAWhH,GAAlCiH,EAFoB,EAEpBA,QAASC,EAFW,EAEXA,WA2BhB,OACI,eAAC,EAAD,CAAcwD,WAAY3D,EAAMsB,YAAhC,UACI,cAAC,EAAD,CAAa1E,aAAa,OAAOb,KAAK,KAAKF,IAAKmE,EAAMsB,YAAaxF,IAAKkE,EAAMlC,QAC9E,cAAC,IAAD,CAAM5C,WAAW,SAAS2E,EAAG,GAA7B,SACI,eAAC,IAAD,CAAMuC,IAAI,OAAV,UACI,cAAC,IAAD,CAAMtC,WAAW,OAAO5C,SAAS,MAAjC,SAAwC8C,EAAMlC,QAC9C,cAAC,EAAD,CAAY/B,KAAK,KAAKkB,OAAQ+C,EAAM/C,SACpC,eAAC,IAAD,CAAM/B,WAAW,SAASyB,gBAAgB,kBAAkByF,IAAK,GAAjE,UACI,cAAC,EAAD,CACI9C,eAAgBY,EAAQE,UAAUW,MAAK,SAAAW,GAAC,OAAIA,EAAE9G,KAAOoF,EAAMpF,MAC3D6C,IAnCJ,WAChB,IAAIgE,EAAa,CACb7G,GAAIoF,EAAMpF,GACVkD,MAAOkC,EAAMlC,MACbwD,YAAatB,EAAMsB,YACnBrE,OAAQ+C,EAAM/C,OACdsE,aAAcvB,EAAMuB,aACpBC,aAAcxB,EAAMwB,cAGnBtB,EAAQE,UAAUW,MAAK,SAAAW,GAAC,OAAIA,EAAE9G,KAAO6G,EAAW7G,OACjDuF,EAAW,2BACJD,GADG,IAENE,UAAU,GAAD,mBAAMF,EAAQE,WAAd,CAAyBqB,QAuBtB1D,OAnBD,WACnB,IAAI6D,EAAe1B,EAAQE,UAAUyB,QAAO,SAAAH,GAAC,OAAIA,EAAE9G,KAAOoF,EAAMpF,MAChEuF,EAAW,2BACJD,GADG,IAENE,UAAWwB,MAgBK7F,KAAK,OAET,cAAC,IAAD,CAAMmB,SAAS,KAAK4C,WAAW,OAA/B,SAAuCE,EAAMwB,cAAgB,OAC7D,cAAC,IAAD,CAAMtE,SAAS,KAAKb,MAAM,WAA1B,SAAsC2D,EAAMuB,kBAEhD,cAAC,IAAD,CAAMzB,WAAW,OAAO5C,SAAS,KAAjC,4CACA,cAAC,IAAD,UAAO8C,EAAMgE,oBCLlBC,GA1CD,WAAO,IACVrJ,EAAMsJ,cAANtJ,GADS,EAGUtB,mBAAS,MAHnB,mBAGT0G,EAHS,KAGFmE,EAHE,OAI8B7K,mBAAS,MAJvC,mBAIT8K,EAJS,KAIQC,EAJR,OAKiClL,EAAW,sBAAC,4BAAAS,EAAA,sEACtCQ,EAASkK,SAAS1J,GADoB,cACnDH,EADmD,gBAEnD,IAAIuI,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAFQ,OAGzDkB,EAAS1J,GAHgD,2CAI1D,CAACG,IATY,mBAKT2J,EALS,KAKGC,EALH,KAKmBC,EALnB,OAUwDtL,EAAW,sBAAC,8BAAAS,EAAA,sEAC7DQ,EAASsK,mBAAmB9J,GADiC,cAC1EH,EAD0E,OAG7D,MADbkK,EAF0E,YAEhElK,EAAK0I,UACb5F,QACJoH,EAAIC,MAJwE,SAM1E,IAAI5B,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAN+B,OAOhFoB,EAAmBM,GAP6D,2CAQjF,CAAC/J,IAlBY,mBAUTiK,EAVS,KAUaC,EAVb,KAUgCC,EAVhC,KAqBhB,OAFAnE,oBAAUiE,EAAsB,CAACA,IACjCjE,oBAAU2D,EAAY,CAACA,IAEnB,cAAC,IAAD,UAESE,GAAcM,EACT,cAAC,IAAD,UAASN,GAAcM,IACtBP,GAAkBM,EACf,cAAC,IAAD,CAAQ5C,GAAI,EAAZ,SAAe,cAAC,IAAD,CAAkB9F,iBAAe,EAACC,MAAM,cACvD,eAAC,IAAD,CAAM+F,IAAK,GAAX,UACE,cAAC,GAAD,CAAWpC,MAAOA,IAClB,cAAC,IAAD,CAAMf,UAAU,SAASa,WAAW,OAAO5C,SAAS,KAApD,sFAE+B,IAA3BkH,EAAgB7G,OACV,cAAC,EAAD,CAAW0E,OAAQmC,IACnB,cAAC,IAAD,CAAMnF,UAAU,SAAS/B,SAAS,KAAlC,+GCUvB8H,GA7CA,WAAO,IACXnK,EAASqJ,cAATrJ,MADU,EAEWvB,mBAAS,MAFpB,mBAEV2L,EAFU,KAEFC,EAFE,OAGO5L,mBAAS,GAHhB,mBAGVgB,EAHU,KAGJ6K,EAHI,OAIqB7L,oBAAS,GAJ9B,mBAIVgJ,EAJU,KAIGQ,EAJH,OAU4B3J,EAAW,sBAAC,4BAAAS,EAAA,6DACrDkJ,GAAe,GADsC,SAElC1I,EAASgL,UAAUvK,EAAOP,GAFQ,cAE/CG,EAF+C,gBAG/C,IAAIuI,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAHI,OAIxC,IAAT3I,EAC4B,IAAxBG,EAAK0I,QAAQ5F,OACb2H,EAAU,GAAD,mBAAKD,GAAL,YAAgBxK,EAAK0I,WAC3BL,GAAe,GAEtBoC,EAAUzK,EAAK0I,SATkC,2CAWtD,CAAC7I,EAAMO,IArBO,mBAUVwK,EAVU,KAUGC,EAVH,KAUaC,EAVb,KAyBjB,OAFA3E,oBAAUyE,EAAa,CAACA,IAGpB,cAAC,IAAD,UAEQE,EACM,cAAC,IAAD,UAASA,IAEX,cAAC,EAAD,CACIjL,KAAMA,EACNgI,YAAaA,EACbC,SA5BH,WACb4C,EAAQ7K,EAAO,IA4BC2H,OAAQgD,EACR1L,UAAW+L,EACXtD,OAAO,+FACPD,cAAc,iBCfvByD,GAtBG,WACd,OACI,cAAC,IAAD,CAAKhD,UAAU,QAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOiD,OAAK,EAACC,KAAK,UAAlB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,aAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,aAAZ,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,iBAAZ,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAUtE,GAAG,kB,UCUduE,GA9BK,WAAO,IAAD,EACIrM,mBAAS,IADb,mBACfuB,EADe,KACR+K,EADQ,KAElBC,EAAUC,cAId,OACI,cAAC,IAAD,UACI,cAAC,KAAD,CACI9K,SAAU,SAAAI,GAAC,OAAIwK,EAASxK,EAAEC,OAAON,QACjCA,MAAOF,EACPM,EAAG,IACHiD,KAAK,SACL2H,YAAY,oCACZrH,YAAY,UACZC,OAAO,YACPF,OAAQ,CAAC5B,UAAU,2CACnBC,OAAQ,CACJ4B,YAAa,WAEjBsH,WAAY,SAAAC,GACU,UAAdA,EAAMzH,KAjBtBqH,EAAQK,KAAK,iBAAmBrL,SCgBzBsL,GAnBQ,WACnB,OACI,cAAC,IAAD,CACI1H,OAAQ,CAAC5B,UAAW,2CACpBuJ,QAAQ,UACR/J,MAAM,QACNwC,YAAY,SACZwH,SAAU,EACVC,GAAIC,IACJnF,GAAG,aAPP,SASI,eAAC,IAAD,CAAMlG,WAAW,SAASD,eAAe,gBAAzC,UACI,cAAC0C,EAAA,EAAD,CAAUwB,GAAI,EAAGhE,EAAG,EAAGgB,EAAG,EAAGE,MAAM,UACnC,cAAC,IAAD,CAAM4C,UAAU,SAAhB,0E,UCADuH,GAbM,WACjB,OACI,cAAC,IAAD,CAAQ3H,YAAY,OAAOyH,GAAIC,IAAMnF,GAAG,UAAxC,SACI,eAAC,IAAD,CAAMlG,WAAW,SAASD,eAAe,gBAAzC,UACI,cAACwL,GAAA,EAAD,CAActH,GAAI,EAAGhE,EAAG,EAAGgB,EAAG,EAAGE,MAAM,UACvC,cAAC,IAAD,CAAM4C,UAAU,SAAhB,2ECQDyH,GAZA,WACX,OACI,cAAC,IAAD,UACI,eAAC,IAAD,CAAM/J,gBAAgB,oBAAoByF,IAAK,GAA/C,UACI,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,UCEDuE,GATE,WACb,OACI,eAAC,IAAD,CAAM/G,aAAa,WAAWgH,QAAS,GAAIxE,IAAK,GAAhD,UACI,cAAC,GAAD,IACA,cAAC,GAAD,QC2CGyE,GA1CH,WAAO,IAAD,EACgBvN,mBAAS,CACnC8G,UAAW,GACXnD,OAAQ,KAHE,mBACPiD,EADO,KACEC,EADF,OAM+BhH,EAAW,sBAAC,4BAAAS,EAAA,sEAClCQ,EAAS0M,YADyB,cAC/CrM,EAD+C,gBAE/C,IAAIuI,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAFI,OAGrD9C,EAAW,2BACJD,GADG,IAENjD,OAAQxC,EAAKwC,UAEb+D,aAAa+F,QAAQ,cACrB5G,EAAW,CACPC,UAAWc,KAAK8F,MAAMhG,aAAa+F,QAAQ,cAC3C9J,OAAQxC,EAAKwC,SAVgC,2CAatD,IAnBW,mBAMPgK,EANO,KAMKC,EANL,KAMiBC,EANjB,KAyBd,OAFAvG,oBAAUqG,EAAY,CAACA,IAGnB,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAChO,EAAamO,SAAd,CAAuBrM,MAAO,CAACmF,UAASC,cAAxC,SAEQgH,EACM,cAAC,IAAD,UAASA,IACTD,EACI,cAAC,IAAD,CAAQhF,GAAI,EAAZ,SAAe,cAAC,IAAD,CAAkB9F,iBAAe,EAACC,MAAM,gBACvD,cAAC,GAAD,WCvClCgL,IAASC,OACL,cAAC,GAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4274e63e.chunk.js","sourcesContent":["import {createContext} from \"react\";\r\n\r\nexport const MovieContext = createContext(null)","import {useCallback, useState} from \"react\";\r\n\r\nexport const useFetching = (callback, deps) => {\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n\r\n    const fetching = async () => {\r\n        try {\r\n            setIsLoading(true)\r\n            await callback()\r\n        } catch (err) {\r\n            setError(err.message)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const newCallback = useCallback( fetching, [...deps])\r\n\r\n    return [newCallback, isLoading, error]\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3/',\r\n    params: {\r\n        'api_key': '7c537609ce83bf7df65cd5b42b892860',\r\n        'language': 'ru',\r\n        'region': 'ru'\r\n    }\r\n})\r\n\r\n\r\nexport default class MovieAPI {\r\n    static async getMovies(option, page) {\r\n        try {\r\n            const response = await instance.get('movie/' + option, {\r\n                params: {\r\n                    page: page\r\n                }\r\n            })\r\n            return response.data\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    static async getMovie(id) {\r\n        try {\r\n            const response = await instance.get('movie/' + id)\r\n            return response.data\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    static async getRecommendations(id) {\r\n        try {\r\n            const response = await instance.get('movie/' + id + '/recommendations')\r\n            return response.data\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    static async getSearch(query, page) {\r\n        try {\r\n            const response = await instance.get('search/movie/', {\r\n                params: {\r\n                    query: query,\r\n                    page: page\r\n                }\r\n            })\r\n            return response.data\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    static async getGenres() {\r\n        try {\r\n            const response = await instance.get('genre/movie/list')\r\n            return response.data\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Flex, Select} from \"@chakra-ui/react\";\r\n\r\nconst SelectFilter = ({value, onChange}) => {\r\n    return (\r\n        <Flex justifyContent=\"center\" alignItems=\"center\">\r\n            <Select\r\n                w={220}\r\n                value={value}\r\n                onChange={e => onChange(e.target.value)}\r\n            >\r\n                <option value='popular'>Популярные фильмы</option>\r\n                <option value='now_playing'>Смотрят сейчас</option>\r\n                <option value='upcoming'>Ожидаемые фильмы</option>\r\n                <option value='top_rated'>Лучшие фильмы</option>\r\n            </Select>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default SelectFilter;","import React, {useState} from 'react';\r\nimport {Box, Center, CircularProgress, Image} from \"@chakra-ui/react\";\r\n\r\n\r\nconst imageSizes = {\r\n    md: {\r\n        height: 270,\r\n        width: 180,\r\n        url: 'w220_and_h330_face'\r\n    },\r\n    lg: {\r\n        height: 540,\r\n        width: 360,\r\n        url: 'w500'\r\n    },\r\n}\r\n\r\nconst MoviePoster = ({src, alt, size, ...props}) => {\r\n\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    const onLoad = () => {\r\n        setLoaded(true)\r\n    }\r\n\r\n    let url\r\n\r\n    if (!src) {\r\n        url = `https://via.placeholder.com/${imageSizes[size].width}x${imageSizes[size].height}?text=Image+not+found`\r\n    } else {\r\n        url = 'https://image.tmdb.org/t/p/' + imageSizes[size].url + src\r\n    }\r\n    return (\r\n        <Box h={imageSizes[size].height} w={imageSizes[size].width}>\r\n            {\r\n                !loaded && <Center h=\"100%\"><CircularProgress isIndeterminate color=\"red.300\"/></Center>\r\n            }\r\n            {\r\n                <Image\r\n                    style={!loaded ? {display: 'none'}: {}}\r\n                    src={url}\r\n                    alt={alt}\r\n                    onLoad={onLoad}\r\n                    {...props}\r\n                />\r\n            }\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default MoviePoster;","import React from 'react';\r\nimport {Grid} from \"@chakra-ui/react\";\r\n\r\nconst MovieItemBox = ({children}) => {\r\n    return (\r\n        <Grid\r\n            templateColumns=\"180px 180px\"\r\n            borderRadius={10}\r\n            boxShadow=\"xl\"\r\n            _hover={{boxShadow: \"dark-lg\"}}\r\n            transition=\"box-shadow 0.3s ease-in-out\"\r\n        >\r\n            {children}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default MovieItemBox;","import React from 'react';\r\nimport {Text} from \"@chakra-ui/react\";\r\n\r\nconst GenresText = ({genres, size}) => {\r\n    return (\r\n        <Text fontSize={size}>\r\n            {\r\n                genres.map((genre, index) =>\r\n                    <span key={genre.id}>{genre.name}{index !== genres.length - 1 && ', '}</span>\r\n                )\r\n            }\r\n        </Text>\r\n    );\r\n};\r\n\r\nexport default GenresText;","import React from 'react';\r\nimport {IconButton} from \"@chakra-ui/react\";\r\nimport {DeleteIcon, NotAllowedIcon, StarIcon} from \"@chakra-ui/icons\";\r\n\r\nconst iconTypes = {\r\n    add: {\r\n        Icon: {\r\n            lg: <StarIcon w={7} h={7} color=\"yellow.300\"/>,\r\n            md: <StarIcon w={6} h={6} color=\"yellow.300\"/>\r\n        },\r\n        rgb: '246, 224, 94',\r\n        hex: '#F6E05E',\r\n        color: 'yellow',\r\n        title: 'Добавить в избранное'\r\n    },\r\n    remove: {\r\n        Icon: {\r\n            lg: <DeleteIcon w={7} h={7} color=\"red.500\"/>,\r\n            md: <DeleteIcon w={6} h={6} color=\"red.500\"/>\r\n        },\r\n        rgb: '229, 62, 62',\r\n        hex: '#E53E3E',\r\n        color: 'red',\r\n        title: 'Удалить из избранных'\r\n    },\r\n    cancel: {\r\n        Icon: {\r\n            lg: <NotAllowedIcon w={7} h={7} color=\"green.500\"/>,\r\n            md: <NotAllowedIcon w={6} h={6} color=\"green.500\"/>\r\n        },\r\n        rgb: '56, 161, 105',\r\n        hex: '#38A169',\r\n        color: 'green',\r\n        title: 'Отмена'\r\n    }\r\n}\r\n\r\nconst MyIconButton = ({size, type, ...props}) => {\r\n    let newProps = props\r\n    if (size === 'lg') {\r\n        newProps = {\r\n            ...newProps,\r\n            _hover: { background: 'transparent' },\r\n            _active: { background: 'transparent' },\r\n        }\r\n    }\r\n    return (\r\n        <IconButton\r\n            {...newProps}\r\n            title={iconTypes[type].title}\r\n            key={type+size}\r\n            _focus={{boxShadow: `rgba(${iconTypes[type].rgb}, 0.6) 0px 0px 0px 3px`}}\r\n            borderColor={iconTypes[type].hex}\r\n            border='3px solid'\r\n            borderRadius=\"50%\"\r\n            variant=\"outline\"\r\n            colorScheme={iconTypes[type].color}\r\n            size={size}\r\n            icon={iconTypes[type].Icon[size]}\r\n        />\r\n    );\r\n};\r\n\r\nexport default MyIconButton;","import React from 'react';\r\nimport {Flex, Text} from \"@chakra-ui/react\";\r\nimport MyIconButton from \"../../MovieCommon/MyIconButton\";\r\n\r\nconst RemoveConfirm = ({remove, cancel}) => {\r\n    return (\r\n        <Flex direction=\"column\" justifyContent=\"space-between\" >\r\n            <Text textAlign=\"center\" fontSize=\"md\" mb={3}>Точно удалить?</Text>\r\n            <Flex justifyContent=\"center\">\r\n                <MyIconButton type='remove' mr={3} size='md' onClick={remove}/>\r\n                <MyIconButton type='cancel' size='md' onClick={() => cancel(false)}/>\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default RemoveConfirm;","import React from 'react';\r\nimport MyIconButton from \"./MyIconButton\";\r\n\r\nconst AddRemoveButtons = ({hasInFavorites, remove, add, ...props}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                hasInFavorites\r\n                    ? <MyIconButton {...props} type='remove' onClick={remove}/>\r\n                    : <MyIconButton {...props} type='add' onClick={add}/>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddRemoveButtons;","import React from 'react';\r\nimport {Box, Flex, Grid, Text} from \"@chakra-ui/react\";\r\nimport GenresText from \"../../MovieCommon/GenresText\";\r\nimport RemoveConfirm from \"./RemoveConfirm\";\r\nimport AddRemoveButtons from \"../../MovieCommon/AddRemoveButtons\";\r\n\r\nconst MovieItemInfo = ({title, genres, hasConfirm, remove, add, date, vote, setHasConfirm, hasInFavorites}) => {\r\n    return (\r\n        <Grid templateRows=\"1fr auto\" p={2}>\r\n            <Box>\r\n                <Text fontWeight=\"bold\">{title}</Text>\r\n                <GenresText size='sm' genres={genres} />\r\n            </Box>\r\n            {\r\n                hasConfirm\r\n                    ?\r\n                    <RemoveConfirm remove={remove} cancel={setHasConfirm} />\r\n                    :\r\n                    <Flex alignItems=\"flex-end\" justifyContent=\"space-between\">\r\n                        <Box>\r\n                            <Text color=\"gray.500\">{date}</Text>\r\n                            <Text fontWeight=\"bold\">{vote || \"Без рейтинга\"}</Text>\r\n                        </Box>\r\n                        <AddRemoveButtons\r\n                            hasInFavorites={hasInFavorites}\r\n                            add={add} remove={remove} size=\"md\"\r\n                        />\r\n                    </Flex>\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default MovieItemInfo;","import React, {useContext, useEffect, useState} from 'react';\r\nimport MoviePoster from \"../../MovieCommon/MoviePoster\";\r\nimport {MovieContext} from \"../../../context\";\r\nimport {Link, useLocation} from \"react-router-dom\";\r\nimport MovieItemBox from \"./MovieItemBox\";\r\nimport MovieItemInfo from \"./MovieItemInfo\";\r\n\r\nconst MovieItem = ({movie}) => {\r\n    const {context, setContext} = useContext(MovieContext)\r\n    const [_favorites, _genres] = [context.favorites, context.genres]\r\n    const [hasRemoveConfirm, setHasRemoveConfirm] = useState(false)\r\n    const location = useLocation()\r\n    const [genres, setGenres] = useState(movie.genres || [])\r\n\r\n    useEffect(() => {\r\n        if (movie.genre_ids) {\r\n            setGenres(movie.genre_ids.map(genre_id => ({\r\n                id: genre_id,\r\n                name: _genres.find(genre => genre.id === genre_id).name\r\n            })))\r\n        }\r\n    }, [movie, _genres])\r\n\r\n    const addFavorite = () => {\r\n        let localMovie = {\r\n            id: movie.id,\r\n            title: movie.title,\r\n            poster_path: movie.poster_path,\r\n            genres: genres,\r\n            release_date: movie.release_date,\r\n            vote_average: movie.vote_average\r\n        }\r\n        if (!_favorites.find(f => f.id === localMovie.id)) {\r\n            setContext({\r\n                ...context,\r\n                favorites: [..._favorites, localMovie]\r\n            })\r\n        }\r\n    }\r\n    const removeFavorite = () => {\r\n        if (location.pathname === '/favorites' && hasRemoveConfirm !== true) {\r\n            setHasRemoveConfirm(true)\r\n        } else {\r\n            let newFavorites = _favorites.filter(f => f.id !== movie.id)\r\n            setContext({\r\n                ...context,\r\n                favorites: newFavorites\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (_favorites.length !== 0) {\r\n            localStorage.setItem('favorites', JSON.stringify(_favorites))\r\n        }\r\n    }, [_favorites])\r\n\r\n    return (\r\n        <MovieItemBox>\r\n            <Link to={\"/movie/\" + movie.id}>\r\n                <MoviePoster borderLeftRadius={10} size=\"md\" src={movie.poster_path} alt={movie.title}/>\r\n            </Link>\r\n            <MovieItemInfo\r\n                title={movie.title}\r\n                genres={genres}\r\n                date={movie.release_date}\r\n                vote={movie.vote_average}\r\n                hasConfirm={hasRemoveConfirm}\r\n                add={addFavorite} remove={removeFavorite}\r\n                setHasConfirm={setHasRemoveConfirm}\r\n                hasInFavorites={_favorites.find(f => f.id === movie.id)}\r\n            />\r\n        </MovieItemBox>\r\n    );\r\n}\r\n\r\n\r\nexport default MovieItem;","import React from 'react';\r\nimport {Center, CircularProgress, Flex, Grid, Text} from \"@chakra-ui/react\";\r\nimport MovieItem from \"./MovieItem/MovieItem\";\r\n\r\nconst MovieList = ({page = 1, isLoading, progressColor, noText, movies}) => {\r\n    return (\r\n\r\n        <Flex direction=\"column\" alignItems=\"center\">\r\n            {\r\n                (page === 1 && isLoading)\r\n                    ? <Center mt={2}><CircularProgress isIndeterminate color={progressColor}/></Center>\r\n                    : movies.length === 0\r\n                        ? <Text textAlign='center' fontSize='2xl'>{noText}</Text>\r\n                        : <Grid transition=\"2s\" templateColumns=\"repeat(4, 360px)\" autoRows=\"270px\" gap={15}>\r\n                            {movies.map(movie => <MovieItem key={movie.id} movie={movie}/>)}\r\n                        </Grid>\r\n            }\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default MovieList;","import React from 'react';\r\nimport {Button, Center, CircularProgress, Text} from \"@chakra-ui/react\";\r\n\r\nconst ShowMore = ({isLoading, hasShowMore, showMore, page, movies, progressColor}) => {\r\n    return (\r\n        <Center minHeight=\"120px\">\r\n            {\r\n                isLoading\r\n                    ? page !== 1 && <CircularProgress isIndeterminate color={progressColor}/>\r\n                    : hasShowMore\r\n                        ? movies.length !== 0 && <Button onClick={showMore}>Показать еще</Button>\r\n                        : <Text fontSize=\"2xl\">Фильмы закончились</Text>\r\n            }\r\n        </Center>\r\n    );\r\n};\r\n\r\nexport default ShowMore;","import React from 'react';\r\nimport {Box} from \"@chakra-ui/react\";\r\nimport MovieList from \"./MovieList\";\r\nimport ShowMore from \"./ShowMore\";\r\n\r\nconst MovieListPaged = ({hasShowMore, noText, showMore, ...props}) => {\r\n    return (\r\n        <Box>\r\n            <MovieList {...props} noText={noText}/>\r\n            <ShowMore {...props} hasShowMore={hasShowMore} showMore={showMore} />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default MovieListPaged;","import React, {useEffect, useState} from \"react\";\r\nimport MovieAPI from \"../../../API/MovieAPI\";\r\nimport { Center, Grid} from \"@chakra-ui/react\";\r\nimport SelectFilter from \"./SelectFilter\";\r\nimport {useFetching} from \"../../../hooks/useFetching\";\r\nimport MovieListPaged from \"../../MovieList/MovieListPaged\";\r\n\r\nconst Movies = () => {\r\n\r\n    const [movies, setMovies] = useState([])\r\n    const [filterPage, setFilterPage] = useState({\r\n        filter: 'popular',\r\n        page: 1\r\n    })\r\n    const [hasShowMore, setHasShowMore] = useState(true)\r\n\r\n    const [fetchMovies, isMoviesLoading, moviesError] = useFetching(async () => {\r\n        setHasShowMore(true)\r\n        const data = await MovieAPI.getMovies(filterPage.filter, filterPage.page)\r\n        await new Promise(resolve => setTimeout(resolve, 750))\r\n        if (filterPage.page !== 1) {\r\n            if (data.results.length !== 0) {\r\n                setMovies([...movies, ...data.results])\r\n            } else setHasShowMore(false)\r\n        } else {\r\n            setMovies(data.results)\r\n        }\r\n    }, [filterPage])\r\n\r\n    useEffect( fetchMovies, [fetchMovies])\r\n\r\n    const onSelectChange = (value) => {\r\n        setFilterPage({\r\n            page: 1,\r\n            filter: value\r\n        })\r\n    }\r\n    const showMore = () => {\r\n        setFilterPage({\r\n            ...filterPage,\r\n            page: filterPage.page + 1\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid templateRows=\"40px 1fr\" gap={15}>\r\n            <SelectFilter value={filterPage.filter} onChange={onSelectChange}/>\r\n            {\r\n                moviesError\r\n                    ? <Center>{moviesError}</Center>\r\n                    :\r\n                    <MovieListPaged\r\n                        page={filterPage.page}\r\n                        hasShowMore={hasShowMore}\r\n                        showMore={showMore}\r\n                        movies={movies}\r\n                        noText=\"Фильмов нет\"\r\n                        isLoading={isMoviesLoading}\r\n                        progressColor=\"blue.300\"\r\n                    />\r\n            }\r\n        </Grid>\r\n    )\r\n\r\n}\r\n\r\nexport default Movies;\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport {MovieContext} from \"../../../context\";\r\nimport MovieList from \"../../MovieList/MovieList\";\r\n\r\nconst Favorites = () => {\r\n    const {context} = useContext(MovieContext)\r\n    const [isFavoriteLoading, setIsFavoriteLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setIsFavoriteLoading(false)\r\n        }, 750)\r\n    }, [])\r\n    return (\r\n        <MovieList\r\n            movies={context.favorites}\r\n            isLoading={isFavoriteLoading}\r\n            progressColor=\"yellow.300\"\r\n            noText=\"Избранных нет\"\r\n        />\r\n    );\r\n};\r\n\r\nexport default Favorites;","import React from 'react';\r\nimport {Box, Flex, Grid} from \"@chakra-ui/react\";\r\n\r\nconst MovieInfoBox = ({children, posterPath}) => {\r\n    return (\r\n        <Box\r\n            backgroundImage={`url(https://image.tmdb.org/t/p/w1920_and_h800_multi_faces/${posterPath})`}\r\n            backgroundRepeat=\"no-repeat\"\r\n            backgroundSize='cover'\r\n            minHeight=\"600px\">\r\n            <Flex\r\n                alignItems='center'\r\n                justifyContent='center'\r\n                minHeight=\"600px\"\r\n                color='white'\r\n                backgroundImage='linear-gradient(to right, rgba(6.27%, 4.31%, 10.98%, 1.00) 150px, rgba(6.27%, 4.31%, 10.98%, 0.84) 100%)'\r\n            >\r\n                <Grid templateColumns=\"360px 950px\">\r\n                    {children}\r\n                </Grid>\r\n            </Flex>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default MovieInfoBox;","import React, {useContext} from 'react';\r\nimport MoviePoster from \"../../../MovieCommon/MoviePoster\";\r\nimport {Flex, Grid, Text} from \"@chakra-ui/react\";\r\nimport {MovieContext} from \"../../../../context\";\r\nimport AddRemoveButtons from \"../../../MovieCommon/AddRemoveButtons\";\r\nimport MovieInfoBox from \"./MovieInfoBox\";\r\nimport GenresText from \"../../../MovieCommon/GenresText\";\r\n\r\nconst MovieInfo = ({movie}) => {\r\n\r\n    const {context, setContext} = useContext(MovieContext)\r\n\r\n    const addFavorite = () => {\r\n        let localMovie = {\r\n            id: movie.id,\r\n            title: movie.title,\r\n            poster_path: movie.poster_path,\r\n            genres: movie.genres,\r\n            release_date: movie.release_date,\r\n            vote_average: movie.vote_average\r\n\r\n        }\r\n        if (!context.favorites.find(f => f.id === localMovie.id)) {\r\n            setContext({\r\n                ...context,\r\n                favorites: [...context.favorites, localMovie]\r\n            })\r\n        }\r\n    }\r\n    const removeFavorite = () => {\r\n        let newFavorites = context.favorites.filter(f => f.id !== movie.id)\r\n        setContext({\r\n            ...context,\r\n            favorites: newFavorites\r\n        })\r\n    }\r\n\r\n    return (\r\n        <MovieInfoBox posterPath={movie.poster_path}>\r\n            <MoviePoster borderRadius='20px' size=\"lg\" src={movie.poster_path} alt={movie.title}/>\r\n            <Flex alignItems='center' p={15}>\r\n                <Grid gap=\"15px\">\r\n                    <Text fontWeight=\"bold\" fontSize=\"4xl\">{movie.title}</Text>\r\n                    <GenresText size='lg' genres={movie.genres} />\r\n                    <Grid alignItems='center' templateColumns='48px 30px 110px' gap={15}>\r\n                        <AddRemoveButtons\r\n                            hasInFavorites={context.favorites.find(f => f.id === movie.id)}\r\n                            add={addFavorite}\r\n                            remove={removeFavorite}\r\n                            size=\"lg\"\r\n                        />\r\n                        <Text fontSize='xl' fontWeight=\"bold\">{movie.vote_average || \"NR\"}</Text>\r\n                        <Text fontSize='xl' color=\"gray.500\">{movie.release_date}</Text>\r\n                    </Grid>\r\n                    <Text fontWeight='bold' fontSize='lg'>Обзор</Text>\r\n                    <Text>{movie.overview}</Text>\r\n                </Grid>\r\n            </Flex>\r\n        </MovieInfoBox>\r\n    );\r\n};\r\n\r\nexport default MovieInfo;","import React, {useEffect, useState} from 'react';\r\nimport {Box, Center, CircularProgress, Grid, Text} from \"@chakra-ui/react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useFetching} from \"../../../hooks/useFetching\";\r\nimport MovieAPI from \"../../../API/MovieAPI\";\r\nimport MovieInfo from \"./MovieInfo/MovieInfo\";\r\nimport MovieList from \"../../MovieList/MovieList\";\r\n\r\nconst Movie = () => {\r\n    const {id} = useParams();\r\n\r\n    const [movie, setMovie] = useState(null)\r\n    const [recommendations, setRecommendations] = useState(null)\r\n    const [fetchMovie, isMovieLoading, movieError] = useFetching(async () => {\r\n        const data = await MovieAPI.getMovie(id)\r\n        await new Promise(resolve => setTimeout(resolve, 750))\r\n        setMovie(data)\r\n    }, [id])\r\n    const [fetchRecommendations, isRecommendations, recommendationsError] = useFetching(async () => {\r\n        const data = await MovieAPI.getRecommendations(id)\r\n        const rec = [...data.results]\r\n        if (rec.length === 21) {\r\n            rec.pop()\r\n        }\r\n        await new Promise(resolve => setTimeout(resolve, 750))\r\n        setRecommendations(rec)\r\n    }, [id])\r\n    useEffect(fetchRecommendations, [fetchRecommendations])\r\n    useEffect(fetchMovie, [fetchMovie])\r\n    return (\r\n        <Box>\r\n            {\r\n                (movieError || recommendationsError)\r\n                    ? <Center>{movieError || recommendationsError}</Center>\r\n                    : (isMovieLoading || isRecommendations)\r\n                        ? <Center mt={2}><CircularProgress isIndeterminate color=\"red.500\"/></Center>\r\n                        : <Grid gap={15}>\r\n                            <MovieInfo movie={movie}/>\r\n                            <Text textAlign='center' fontWeight='bold' fontSize='xl'>Рекомендации</Text>\r\n                            {\r\n                                recommendations.length !== 0\r\n                                    ? <MovieList movies={recommendations}/>\r\n                                    : <Text textAlign='center' fontSize='xl'>Рекомендации нет</Text>\r\n                            }\r\n                        </Grid>\r\n            }\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Movie;","import React, {useEffect, useState} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useFetching} from \"../../../hooks/useFetching\";\r\nimport MovieAPI from \"../../../API/MovieAPI\";\r\nimport {Box, Center} from \"@chakra-ui/react\";\r\nimport MovieListPaged from \"../../MovieList/MovieListPaged\";\r\n\r\nconst Search = () => {\r\n    const {query} = useParams()\r\n    const [search, setSearch] = useState(null)\r\n    const [page, setPage] = useState(1)\r\n    const [hasShowMore, setHasShowMore] = useState(true)\r\n\r\n    const showMore = () => {\r\n        setPage(page + 1)\r\n    }\r\n\r\n    const [fetchSearch, isSearch, searchError] = useFetching(async () => {\r\n        setHasShowMore(true)\r\n        const data = await MovieAPI.getSearch(query, page)\r\n        await new Promise(resolve => setTimeout(resolve, 750))\r\n        if (page !== 1) {\r\n            if (data.results.length !== 0) {\r\n                setSearch([...search, ...data.results])\r\n            } else setHasShowMore(false)\r\n        } else {\r\n            setSearch(data.results)\r\n        }\r\n    }, [page, query])\r\n\r\n    useEffect(fetchSearch, [fetchSearch])\r\n\r\n    return (\r\n        <Box>\r\n            {\r\n                searchError\r\n                    ? <Center>{searchError}</Center>\r\n                    :\r\n                    <MovieListPaged\r\n                        page={page}\r\n                        hasShowMore={hasShowMore}\r\n                        showMore={showMore}\r\n                        movies={search}\r\n                        isLoading={isSearch}\r\n                        noText='Ничего не найдено'\r\n                        progressColor=\"green.300\"\r\n                    />\r\n            }\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport Movies from \"./Pages/Movies/Movies\";\r\nimport Favorites from \"./Pages/Favorites/Favorites\";\r\nimport Movie from \"./Pages/Movie/Movie\";\r\nimport Search from \"./Pages/Search/Search\";\r\nimport {Box} from \"@chakra-ui/react\";\r\n\r\nconst AppRouter = () => {\r\n    return (\r\n        <Box minHeight=\"100vh\">\r\n            <Switch>\r\n                <Route exact path=\"/movies\">\r\n                    <Movies />\r\n                </Route>\r\n                <Route exact path=\"/movie/:id\">\r\n                    <Movie />\r\n                </Route>\r\n                <Route path=\"/favorites\">\r\n                    <Favorites />\r\n                </Route>\r\n                <Route path=\"/search/:query\">\r\n                    <Search />\r\n                </Route>\r\n                <Redirect to=\"/movies\" />\r\n            </Switch>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import React, {useState} from 'react';\r\nimport {Center, Input} from \"@chakra-ui/react\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst SearchInput = () => {\r\n    const [query, setQuery] = useState('')\r\n    let history = useHistory();\r\n    const redirect = () => {\r\n        history.push(\"/search?query=\" + query)\r\n    }\r\n    return (\r\n        <Center>\r\n            <Input\r\n                onChange={e => setQuery(e.target.value)}\r\n                value={query}\r\n                w={400}\r\n                type='search'\r\n                placeholder='Поиск...'\r\n                borderColor=\"#38A169\"\r\n                border=\"3px solid\"\r\n                _focus={{boxShadow: `rgba(56, 161, 105, 0.6) 0px 0px 0px 3px`}}\r\n                _hover={{\r\n                    borderColor: \"#38A169\"\r\n                }}\r\n                onKeyPress={event => {\r\n                    if (event.key === 'Enter') {\r\n                        redirect()\r\n                    }\r\n                }}\r\n            />\r\n        </Center>\r\n    );\r\n};\r\n\r\nexport default SearchInput;","import React from 'react';\r\nimport {Button, Flex, Text} from \"@chakra-ui/react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {StarIcon} from \"@chakra-ui/icons\";\r\n\r\nconst FavoriteButton = () => {\r\n    return (\r\n        <Button\r\n            _focus={{boxShadow: 'rgba(246, 224, 94, 0.6) 0px 0px 0px 3px'}}\r\n            bgColor=\"#F6E05E\"\r\n            color='white'\r\n            colorScheme=\"yellow\"\r\n            paddingX={2}\r\n            as={Link}\r\n            to=\"/favorites\"\r\n        >\r\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" >\r\n                <StarIcon mr={2} w={6} h={6} color=\"white\"/>\r\n                <Text textAlign=\"center\">Избранное</Text>\r\n            </Flex>\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default FavoriteButton;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Button, Flex, Text} from \"@chakra-ui/react\";\r\nimport {CalendarIcon} from \"@chakra-ui/icons\";\r\n\r\nconst MoviesButton = () => {\r\n    return (\r\n        <Button colorScheme=\"blue\" as={Link} to=\"/movies\">\r\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" >\r\n                <CalendarIcon mr={2} w={6} h={6} color=\"white\"/>\r\n                <Text textAlign=\"center\">\r\n                    Все фильмы\r\n                </Text>\r\n            </Flex>\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default MoviesButton;","import React from 'react';\r\nimport {Center, Grid} from \"@chakra-ui/react\";\r\nimport SearchInput from \"./SearchInput\";\r\nimport FavoriteButton from \"./FavoriteButton\";\r\nimport MoviesButton from \"./MoviesButton\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <Center>\r\n            <Grid templateColumns=\"140px 400px 135px\" gap={15} >\r\n                <MoviesButton />\r\n                <SearchInput />\r\n                <FavoriteButton />\r\n            </Grid>\r\n        </Center>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport {Grid} from \"@chakra-ui/react\";\r\nimport AppRouter from \"./AppRouter\";\r\nimport Header from \"./Header/Header\";\r\n\r\nconst MovieApp = () => {\r\n    return (\r\n        <Grid templateRows=\"40px 1fr\" marginY={15} gap={15}>\r\n            <Header />\r\n            <AppRouter />\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default MovieApp;","import React, {useEffect, useState} from 'react';\nimport {MovieContext} from \"./context\";\nimport {useFetching} from \"./hooks/useFetching\";\nimport MovieAPI from \"./API/MovieAPI\";\nimport {Center, CircularProgress} from \"@chakra-ui/react\";\nimport {HashRouter} from \"react-router-dom\";\nimport {ChakraProvider} from \"@chakra-ui/react\"\nimport MovieApp from \"./components/MovieApp\";\n\n\nconst App = () => {\n    const [context, setContext] = useState({\n        favorites: [],\n        genres: []\n    })\n\n    const [fetchStart, isStarting, startError] = useFetching(async () => {\n        const data = await MovieAPI.getGenres()\n        await new Promise(resolve => setTimeout(resolve, 750))\n        setContext({\n            ...context,\n            genres: data.genres\n        })\n        if (localStorage.getItem('favorites')) {\n            setContext({\n                favorites: JSON.parse(localStorage.getItem('favorites')),\n                genres: data.genres\n            })\n        }\n    }, [])\n\n\n\n    useEffect(fetchStart, [fetchStart])\n\n    return (\n        <HashRouter>\n            <ChakraProvider>\n                <MovieContext.Provider value={{context, setContext}}>\n                    {\n                        startError\n                            ? <Center>{startError}</Center>\n                            : isStarting\n                                ? <Center mt={2}><CircularProgress isIndeterminate color=\"green.300\"/></Center>\n                                : <MovieApp />\n                    }\n                </MovieContext.Provider>\n            </ChakraProvider>\n        </HashRouter>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}